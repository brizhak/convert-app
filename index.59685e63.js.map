{"mappings":"uDAEA,IAAIA,ECFJC,EAAiBC,KAAKC,MAAM,8gB,IDc5BC,EAVgBC,OAAOC,SAAEA,EAAQC,UAAEA,MACjC,MAAMC,KAAEA,EAAIC,MAAEA,GAAUH,EACxB,QAA+BI,IAA3BC,EAAAV,GAAMO,GAAMD,GAId,OADAP,GAAUW,EAAAV,GAAMO,GAAMD,GAAaE,GAAOG,QAAQ,GAC3C,CAAEJ,KAAMD,EAAWE,MAAOT,GAHjCa,MAAM,wC,MEHVC,EAJmB,CAACC,EAAUT,EAAUG,EAAOO,EAAUR,KACvDO,EAASE,YAAc,MAAMX,KAAYU,KAAYP,KAASD,GAAM,ECGtE,MAAMU,EAAWC,SAASC,eAAe,UACnCC,EAASF,SAASC,eAAe,mBAevC,IAAIE,EAbiB,MACnB,MAAMC,EAAUJ,SAASK,iBAAiB,UAC1C,IAAK,IAAIhB,KAAQG,EAAAV,GAAO,CACtB,MAAMwB,EAASN,SAASO,cAAc,UACtCD,EAAOhB,MAAQD,EACfiB,EAAOR,YAAcT,EACrBe,EAAQI,SAAQC,GAAUA,EAAOC,IAAIJ,EAAOK,WAAU,MACtDC,QAAQC,IAAI,S,GAIhBC,GAwBAZ,EAAOa,iBAAiB,UApBP7B,MAAM8B,IACrBA,EAAEC,iBACF,MAAM9B,EAAWa,SAASC,eAAe,YAAYX,MAC/CO,EAAWG,SAASC,eAAe,YAAYX,MAC/C4B,EAASlB,SAASC,eAAe,UAAUX,MAEjD,GAAIO,IAAaqB,EACfxB,MAAM,6CACD,CACLS,QAAalB,EAAQ,CACnBE,SAAU,CAAEE,KAAMQ,EAAUP,MAAOH,GACnCC,UAAW8B,IAEb,MAAM7B,KAAEA,EAAIC,MAAEA,GAAUa,EACxBR,EAAWI,EAAUZ,EAAUG,EAAOO,EAAUR,E,CAGlDa,EAAOiB,OAAO","sources":["src/scripts/convert-distance.js","src/scripts/rules.json","src/scripts/show-result.js","src/scripts/main.js"],"sourcesContent":["import rules from './rules.json';\n\nlet result;\n\nconst convert = async ({ distance, convertTo }) => {\n  const { unit, value } = distance;\n  if (rules[unit][convertTo] === undefined) {\n    alert('Select the unit of measure to convert');\n  } else {\n    result = (rules[unit][convertTo] * value).toFixed(2);\n    return { unit: convertTo, value: result };\n  }\n};\n\nexport default convert;\n","{\n  \"km\": {\n    \"m\": 1000,\n    \"cm\": 100000,\n    \"in\": 39370.1,\n    \"ft\": 3280.84,\n    \"mm\": 1000000,\n    \"yd\": 1094\n  },\n  \"m\": {\n    \"cm\": 100,\n    \"in\": 39.37,\n    \"ft\": 3.281,\n    \"km\": 0.001,\n    \"mm\": 1000,\n    \"yd\": 1.094\n  },\n  \"cm\": {\n    \"m\": 0.01,\n    \"in\": 0.3937,\n    \"ft\": 0.0328,\n    \"km\": 0.00001,\n    \"mm\": 10,\n    \"yd\": 0.01094\n  },\n  \"mm\": {\n    \"m\": 0.001,\n    \"cm\": 0.1,\n    \"in\": 0.03937,\n    \"ft\": 0.00328,\n    \"km\": 0.000001,\n    \"yd\": 0.00109\n  },\n  \"in\": {\n    \"m\": 0.0254,\n    \"cm\": 2.54,\n    \"ft\": 0.0833,\n    \"km\": 0.0000254,\n    \"mm\": 25.4,\n    \"yd\": 0.0278\n  },\n  \"ft\": {\n    \"m\": 0.3048,\n    \"cm\": 30.48,\n    \"in\": 12,\n    \"km\": 0.0003048,\n    \"mm\": 304.8,\n    \"yd\": 0.3333\n  },\n  \"yd\": {\n    \"m\": 0.9144,\n    \"cm\": 91.44,\n    \"in\": 36,\n    \"ft\": 3,\n    \"km\": 0.0009144,\n    \"mm\": 914.4\n  }\n}","const showResult = (resultEl, distance, value, fromUnit, unit) => {\n  resultEl.textContent = `At ${distance} ${fromUnit} ${value} ${unit}`;\n};\n\nexport default showResult;\n","import rules from './rules.json';\nimport convert from './convert-distance';\nimport showResult from './show-result';\n\nconst resultEl = document.getElementById('result');\nconst formEl = document.getElementById('conversion-form');\n\nconst renderMarkup = () => {\n  const selects = document.querySelectorAll('select');\n  for (let unit in rules) {\n    const option = document.createElement('option');\n    option.value = unit;\n    option.textContent = unit;\n    selects.forEach(select => select.add(option.cloneNode(true)));\n    console.log('render');\n  }\n};\n\nrenderMarkup();\n\nlet rule;\n\nconst onSubmit = async e => {\n  e.preventDefault();\n  const distance = document.getElementById('distance').value;\n  const fromUnit = document.getElementById('fromUnit').value;\n  const toUnit = document.getElementById('toUnit').value;\n\n  if (fromUnit === toUnit) {\n    alert('Select the unit of measure to convert');\n  } else {\n    rule = await convert({\n      distance: { unit: fromUnit, value: distance },\n      convertTo: toUnit,\n    });\n    const { unit, value } = rule;\n    showResult(resultEl, distance, value, fromUnit, unit);\n  }\n\n  formEl.reset();\n};\n\nformEl.addEventListener('submit', onSubmit);\n"],"names":["$80aea8f4dc7150cc$var$result","$645379f7f08ba830$exports","JSON","parse","$80aea8f4dc7150cc$export$2e2bcd8739ae039","async","distance","convertTo","unit","value","undefined","$parcel$interopDefault","toFixed","alert","$c98c689cc0c9dc43$export$2e2bcd8739ae039","resultEl","fromUnit","textContent","$ac43a74d429af77f$var$resultEl","document","getElementById","$ac43a74d429af77f$var$formEl","$ac43a74d429af77f$var$rule","selects","querySelectorAll","option","createElement","forEach","select","add","cloneNode","console","log","$ac43a74d429af77f$var$renderMarkup","addEventListener","e","preventDefault","toUnit","reset"],"version":3,"file":"index.59685e63.js.map"}